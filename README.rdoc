= Peachy

Peachy dynamically slurps XML from an underlying XML DOM, creating ruby methods 
on the fly to match the elements and attributes of the XML.

Source available at http://github.com/njpearman/Peachy

=== Install
There is no gem available for Peachy yet.  This is the next bit of work to
complete. In the meantime, if you wish to mess around with Peachy, download and
include the source files in /lib within your project.

== Usage
The Peachy::Proxy is the key class in Peachy.  Create a new instance of a
Peachy::Proxy passing in either a raw XML string, or a Nokogiri::XML instance

    proxy = Peachy::Proxy.new :xml => '<xml><node>Peachy</node></xml>'

or

    proxy = Peachy::Proxy.new :nokogiri => Nokogiri::XML('<xml><node>Peachy</node></xml>')

Once you have a Proxy, it's straightforward to drill down through the XML by
node name:

    puts 'Contents: ' + proxy.xml.node
    -> Contents: Peachy

Peachy expects method names to be called in the Ruby convention of lowercase with
underscores.  It will do it's best to match method names to elements and attributes
following different conventions (currently, this is only CamelCaseNames or
hyphen-separated-names)

More detailed usage examples can be found in the .rb files in the /test directory.

=== XML parsing

Currently, Peachy is hard wired to use Nokogiri for XML parsing, but this will
be abstracted out at some point.

=== Elements and Attributes

Currently, elements and attributes are accessed in exactly the same way, that is
to call a method on your current node matching the attribute or element name that
is required.
As Peachy is currently just slurping XML, it makes it easy to know how to access
the property that you're after if the conventions are the same.

=== No method name match

Peachy is currently short-tempered, in that if no element or attribute match is
found when drilling down through proxies, a NoMatchingXmlPart error will be
raised.